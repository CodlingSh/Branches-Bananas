#include "player.h"
#include "branch.h"
#include "banana.h"
#include <Arduboy2.h>

#define MAX_BRANCHES 10

Arduboy2 ab;
Player player;
Banana b;
Branch branches[MAX_BRANCHES];
bool animate = true;
int state;
int bananaCount;
int branchCount;

// LOGO SPRITES
const uint8_t PROGMEM logo_branches[] = {
11, 62,
0x7f, 0xff, 0xff, 0xe6, 0xe6, 0xfe, 0xfe, 0xce, 0xcc, 0xfc, 0xfc, 
0x1c, 0x38, 0x39, 0x39, 0x39, 0xf8, 0xf8, 0xd9, 0x01, 0x01, 0x01, 
0x6f, 0x7f, 0x77, 0x77, 0x7e, 0x70, 0x7c, 0x7d, 0x00, 0x00, 0x00, 
0x77, 0x66, 0xee, 0xee, 0xee, 0xfe, 0xfe, 0xf6, 0x00, 0x00, 0x00, 
0x3c, 0x7e, 0x5e, 0x0e, 0x0e, 0x5c, 0xfc, 0xf8, 0x00, 0x00, 0x00, 
0x33, 0x77, 0x77, 0x77, 0x66, 0x6e, 0xfe, 0x7e, 0x0e, 0x0c, 0x1c, 
0x3e, 0x3f, 0x07, 0x7f, 0x7f, 0xee, 0xfe, 0x78, 0x00, 0x00, 0x00, 
0x1f, 0x3f, 0x39, 0x3c, 0x3e, 0x0e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM logo_and[] = {
11, 62,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x7c, 0xfe, 0x8f, 0x87, 0xcf, 0xfe, 0xfc, 0xce, 0xce, 0xfe, 0xf8, 
0x1e, 0x3f, 0x39, 0x3b, 0x02, 0x06, 0x0f, 0x0f, 0x01, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM logo_bananas[] = {
11, 62,
0xfc, 0xfc, 0xfc, 0x98, 0x98, 0xf8, 0xf8, 0x38, 0x30, 0xf0, 0xf0, 
0xf1, 0xf3, 0x77, 0x77, 0xe7, 0x03, 0xc3, 0xc7, 0x07, 0x07, 0x07, 
0x76, 0x67, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x67, 0x00, 0x00, 0x00, 
0xe7, 0xe6, 0xee, 0xee, 0xce, 0x0f, 0x8f, 0x8f, 0x00, 0x00, 0x00, 
0xed, 0xcf, 0xce, 0xce, 0xcf, 0xce, 0xcf, 0xcf, 0x00, 0x00, 0x00, 
0xce, 0xcc, 0xdd, 0xdd, 0x9d, 0x1f, 0x1f, 0x1e, 0x00, 0x00, 0x00, 
0xdb, 0xdf, 0x5d, 0x1d, 0x9f, 0x9c, 0x9f, 0x1f, 0x00, 0x00, 0x00, 
0x07, 0x0f, 0x0e, 0x0f, 0x0f, 0x03, 0x0f, 0x0f, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM logo_message[] = {
27, 50,
0x00, 0xc0, 0x20, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x47, 0x49, 0xc9, 0x07, 
0x00, 0x18, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x92, 0x92, 0x92, 0x8e, 0x02, 0x02, 0x00, 0x00, 0x00, 0x70, 0x08, 0x78, 0x48, 0x31, 0x00, 
0x00, 0x20, 0x50, 0x40, 0x40, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0xc7, 0x24, 0x24, 0x24, 0xe4, 0x20, 0x20, 0x00, 0x00, 0x00, 0x8e, 0x10, 0x0c, 0x82, 0x1c, 0x00, 
0x00, 0x9c, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x84, 0x84, 0x84, 0x1c, 0x04, 0x04, 0x00, 0x00, 0x00, 0x03, 0x04, 0x03, 0x00, 0x07, 0x00, 
0x40, 0x48, 0xca, 0x4a, 0x4a, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x24, 0x24, 0x24, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x24, 0x38, 0x20, 0x18, 0x00, 
0x00, 0x10, 0x01, 0x12, 0x12, 0x11, 0x10, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x09, 0x89, 0x49, 0x49, 0x47, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x02, 0x02, 0x02, 0x00, 
};

const uint8_t PROGMEM logo_credit[] = {
29, 39,
0x00, 0x1c, 0x82, 0x82, 0x82, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x48, 0x48, 0x46, 0xc1, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc3, 0x24, 0x24, 0x24, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x12, 0xf2, 0x92, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0xc0, 
0x00, 0x31, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x18, 0x84, 0x84, 0x84, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x60, 0x81, 0xe2, 0x92, 0x91, 0x92, 0x01, 
0x00, 0x49, 0x49, 0x49, 0x49, 0x39, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x24, 0x24, 0x24, 0xc7, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0c, 0x10, 0x1c, 0x12, 0x12, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x49, 0x49, 0x49, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// TREE SPRITES
const uint8_t PROGMEM tree[] = {
8, 3,
0x06, 0x07, 0x07, 0x07, 0x05, 0x07, 0x07, 0x06, 
};

const uint8_t PROGMEM treeR[] = {
8, 3,
0x03, 0x07, 0x07, 0x07, 0x05, 0x05, 0x07, 0x07, 
};

// Scoreboard stuff
const uint8_t PROGMEM board[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x90, 0x90, 0x70, 0x90, 0x70, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x24, 0x24, 0x1c, 0x24, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x93, 0xf2, 0x92, 0x90, 0x90, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x90, 0x90, 0x8c, 0x02, 0x1c, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x24, 0x38, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x21, 0xc1, 0x01, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x44, 0x44, 0x44, 0x54, 0x54, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x20, 0x20, 0x20, 0xc7, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x49, 0x89, 0x09, 0x87, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x49, 0x49, 0x49, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x1e, 0x02, 0x02, 0x0e, 0x02, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x09, 0x09, 0x38, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x92, 0x93, 0x92, 0x71, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x82, 0x82, 0x82, 0x9c, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x18, 0x24, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x0f, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x24, 0x38, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x24, 0xe4, 0x24, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xc6, 0x46, 0x49, 0xc9, 0x49, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x06, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x31, 0x09, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x93, 0x50, 0x70, 0x91, 0x90, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM zero[] = {
7, 6,
0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x06, 
};

const uint8_t PROGMEM one[] = {
7, 5,
0x07, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 
};

const uint8_t PROGMEM two[] = {
7, 6,
0x0f, 0x01, 0x02, 0x04, 0x08, 0x09, 0x06, 
};

const uint8_t PROGMEM three[] = {
7, 6,
0x07, 0x08, 0x08, 0x06, 0x08, 0x08, 0x07, 
};

const uint8_t PROGMEM four[] = {
7, 6,
0x08, 0x08, 0x1f, 0x09, 0x0a, 0x0c, 0x08, 
};

const uint8_t PROGMEM five[] = {
7, 6,
0x07, 0x08, 0x08, 0x07, 0x01, 0x01, 0x0f, 
};

const uint8_t PROGMEM six[] = {
7, 6,
0x06, 0x09, 0x09, 0x07, 0x01, 0x01, 0x06, 
};

const uint8_t PROGMEM seven[] = {
7, 6,
0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x0f, 
};

const uint8_t PROGMEM eight[] = {
7, 6,
0x06, 0x09, 0x09, 0x06, 0x09, 0x09, 0x06, 
};

const uint8_t PROGMEM nine[] = {
7, 6,
0x06, 0x08, 0x08, 0x0e, 0x09, 0x09, 0x06, 
};

void setup() {
  // put your setup code here, to run once:
  ab.begin();
  Serial.begin(9600);
  ab.clear();
  state = 0;
  branchCount = 0;
  bananaCount = 0;
  ab.initRandomSeed();
  ab.setFrameRate(60);
}

void loop() {
  static int animFrame = 0;
  static int spawnTimer = 0;
  

  // Check for next frame
  if (!ab.nextFrame()) {
    return;
  }

  ab.pollButtons();
  ab.clear();

  // Game State switch
  switch (state) {
    case 0:
      // TITLE SCREEN
      titlescreen();
      break;
    case 1:
      // GAME PLAY
      ab.invert(true);
      // Branch Spawn logic
      spawnTimer++;
      if (spawnTimer == 24) {
        spawnBranch();
        spawnTimer = 0;
      }
      ab.setCursor(100, 30);
      ab.println(player.getY());
      if (anyButtonPressed()) {
        player.jump();
      }
      if (ab.justPressed(A_BUTTON)) {
        branches[0].spawn();
      }

      player.update();
      b.update();
      
      // Check if hit banana
      if (bananaCollisionCheck()) {
        bananaCount++;
        b.spawn();
      }
      // Check if hit branch
      if (branchCollisionCheck()) {
        player.fall();
        animate = false;
      }
      if (player.getX() < -50) {
        state = 2;
      }

      // Add point for passing a branch
      if (branchScore()) {
        branchCount++;
      }

      // Draw functions
      drawTrees(animFrame);
      b.draw();
      for (int i = 0; i < MAX_BRANCHES; i++) {
        if (branches[i].getActive()) {
          if (animate) branches[i].update();
          branches[i].draw();
        }
      }
      player.draw();

      break;
    case 2:
      // GAME OVER
      gameOver();
  }

  ab.display();
}

/**
 * @brief check if any button is being pressed
 *
 * This function checks if any button on the Arduboy is being pressed
 *
 * @return True if any button is pressed
 */
bool anyButtonPressed() 
{
  return ab.justPressed(LEFT_BUTTON)  ||
         ab.justPressed(RIGHT_BUTTON) || 
         ab.justPressed(UP_BUTTON)    || 
         ab.justPressed(DOWN_BUTTON)  ||
         ab.justPressed(A_BUTTON)     ||
         ab.justPressed(B_BUTTON);
}

void titlescreen() 
{
  static int offset = 80;
  static int inPosition = false;

  Sprites::drawOverwrite(116, 1 + offset, logo_branches, 0);
  Sprites::drawOverwrite(101, 1 - offset, logo_and, 0);
  Sprites::drawOverwrite(89, 1 + offset, logo_bananas, 0);
  
  
  if (anyButtonPressed()) 
  {
    if (!inPosition) 
    {
      offset = 0;
    }
    else 
    {
      // ab.initRandomSeed();
      state = 1;
    }
  }

  if (offset <= 0) 
  {
    inPosition = true;
    Sprites::drawOverwrite(44, 8, logo_message, 0);
    Sprites::drawOverwrite(0, 13, logo_credit, 0);
  }
  else 
  {
    offset -= 2;
  } 
}

void gameOver() 
{ 
  int branchesTenthousands;
  int branchesThousands;
  int branchesHundreds;
  int branchesTens;
  int branchesOnes;
  int *branchesTenthousandsSprite;
  int *branchesThousandsSprite;
  int *branchesHundredsSprite;
  int *branchesTensSprite;
  int *branchesOnesSprite;

  
  branchesTenthousands = (branchCount / 10000);
  branchesThousands = (branchCount / 1000) % 10;
  branchesHundreds = (branchCount / 100) % 10;
  branchesTens = (branchCount / 10) % 10;
  branchesOnes = (branchCount) % 10;
  
  // Assign sprite to pointer
  branchesTenthousandsSprite = getDigitSprite();
  branchesThousandsSprite = getDigitSprite();
  branchesHundredsSprite = getDigitSprite();
  branchesTensSprite = getDigitSprite();
  branchesOnesSprite = getDigitSprite();

  // Invert
  ab.invert(false);
  // Draw background
  Sprites::drawOverwrite(0, 0, board, 0);

  // Print
  Serial.println(branchesTenthousands);
  Serial.println(branchesThousands);
  Serial.println(branchesHundreds);
  Serial.println(branchesTens);
  Serial.println(branchesOnes);
  Serial.println("Branches = " + String(branchCount));

  // Draw branches score
  Sprites::drawOverwrite(86, 30, one, 0);
  

  if (anyButtonPressed()) 
  {
    resetGame();
  }
}

uint8_t getDigitSprite(int digit)
{
  
}


void drawTrees(int &animFrame) 
{
  if (animate) 
  {
    if (animFrame < 7) 
    {
      animFrame++;
    } else {
      animFrame = 0;
    }
  }
  
  for (int i = 0; i <= 128; i += 8) 
  {
    Sprites::drawOverwrite(i - animFrame, 0, tree, 0);
    Sprites::drawOverwrite(i - animFrame, 61, treeR, 0);
  }
}

bool branchScore() {
  for (int i = 0; i < MAX_BRANCHES; i++) 
  {
    if (branches[i].getX() <= -5) 
    {
      return true;
    }
  }

  return false;
}

bool branchCollisionCheck() 
{
  for (int i = 0; i < MAX_BRANCHES; i++) 
  {
    if (branches[i].getActive()) 
    {
      if (player.getX() < branches[i].getX() + branches[i].getHeight() - 1 &&       // Is the bottom of the player below the top of the branch (subtract 1)
          player.getX() + 16 > branches[i].getX() + 2 &&                            // Is the top of the player above the bottom of the branch (plus 2)
          player.getY() < branches[i].getY() + branches[i].getLength() - 2 &&           // Is the left of the player to the left of the right of the branch
          player.getY() + 16 > branches[i].getY() + 2)                                  // Is the right of the player to the right of the left of the branch
      {
        return true;
      }
    }
  }

  return false;
}

bool bananaCollisionCheck() 
{
      if (player.getX() < b.getX() + 16 &&
          player.getX() + 16 > b.getX() &&
          player.getY() < b.getY() + 12 &&
          player.getY() + 16 > b.getY())                                  
      {
        return true;
      }
      return false;
}

void resetGame() 
{
  player.reset();
  for (int i = 0; i < MAX_BRANCHES; i++) {
    branches[i].reset();
  }
  animate = true;
  state = 1;
  bananaCount = 0;
  branchCount = 0;
}

int spawnBranch() {
  for (int i = 0; i < MAX_BRANCHES; i++) {
    if (!branches[i].getActive()) {
      branches[i].spawn();
      return 0;   
    }
  }
}